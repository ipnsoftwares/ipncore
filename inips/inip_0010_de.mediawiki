<pre>
  INIP: 10
  Title: Einfachs Format für Öffentliche Schlüssel
  Autor: LeTaylor
  Comments-Summary: Noch keine Kommentare.
  Status: Final
  Type: Standards Track
  Lizenz: MIT
  Erstellt: 2022-10-10
</pre>


== Einführung ==

=== Abstrakt ===

Dieses Dokument beschreibt die Standards zur Formatierung von IPN-Adressen.

=== Copyright ===

Dieses Dokument ist unter der 2-Klausel-BSD-Lizenz lizenziert.

=== Motivation ===

Der IPN-Core verwendet eine Hexcodierung für öffentliche Schlüssel, der Vorteil von einer Hexcodierung ist, dass ein Nutzer weder auf die groß / Kleinschreibung achten muss, jedoch benötigt eine Hexcodierung mehr Speicherplatz.
Dank Bitcoin und anderen Kryptowährungen haben wir die Erfahrung gemacht, das Base32, Base58 oder Bech32 sich Perfekt als Codierung für Adressen eignen. Aus diesem Grunde habe ich mich entschieden, einige Standards für die Formatierung von IPN Adressen zu erstellen. Durch die Eigenschaft, dass Öffentliche Schlüssels im Protokoll mittels Hex übertragen werden, handelt es sich um einen SoftFork, die Kernregeln des IPN-Netzwerkes werden nicht verändert.


=== Specification: Address Types ===

* Einfache Adresse (SIA)
* Vektor Adresse (VKA)
* Bitcoin Shnorr Adressen (BSA)


=== Einfache Adresse (SIA) ===


Eine einfache Adresse besteht aus 3 Wesentlichen Angaben:

* Öffentlicher Schlüssel  (pk | 32 - 128 bytes)
* Verwendetes Verfahren   (ca | 1 byte)
* Checksume               (ch | 2 bytes)


Um eine einfache Adresse (SIA) zu erstellen, wird ein Hash aus dem Öffentlichen schlüssle (pk) sowie dem Verwendeten Kryptografischen verfahren (ca) erstellt, diesen Hash verwenden wird als Checksume (ch).

<pre style="white-space: pre;">
ch = SHA256(SHA256(pk | ca))
</pre>


Als nächstes Extrahieren wir die letzten 2 Bytes des Hashes und fügen die Bytes als Checksume (ch) dem öffentlichen Schlüssel (pk) sowie dem Kryptografischen verfahren (ca) hinzu.


<pre style="white-space: pre;">
adr = pk | ca | ch
</pre>


Nun können wir das Ergebnis aus dem letzten Schritt mittels Base32 in einen String codieren (fadr) und den Header ("''ipnb''") für das Hauptnetzwerk an Beginn des Strings anfügen.


<pre style="white-space: pre;">
fadr = "ipnb" + BASE32(pk | ca | ch)
</pre>



Die Fertige Adresse (fadr) kann nun mit anderen geteilt werden, beispiele für Adressen:
<pre style="white-space: pre;">
ipnbakuksjh6uibxsn4c7sneobgur72fvhm3kkguf65nig4ramv765nacoq
ipnb3ypvi4jhdqekzt233yzdpzfmxro7miu2io6oxunl3xnxnernsa5qd6q
ipnbysigvurvbcgtn6bombjagot6cgsi6ca4m5unvd36dtak66s3nimqcaa
ipnbuplxf6ydxver4omnf2fehewcowqve3pmp3gjrdyvftxvpzdnqjracxq
ipnbokk5ndlgypwtw5s6iq5tur7d45wc5l2akbqeycnyefr2ruq2bjeqcna
</pre>


=== Vektor Adresse (VKA) ===

Bei einer Vektor Adresse (VKA) handelt es sich um einen JSON Datensatz, dieser Datensatz wird mittels CBOR in Bytes umgewandelt, welche am ende mittels Base32 kodiert werden. Verktor Adressen (VKA) erlauben komplexe Adressformen und mehrschichtige Sicherheitssysteme. Vektor Adressen können unter Umständen als Live Smart Contracts bezeichnet werden.

* Eine Vektor Adresse hat keinen festen Aufbau, damit sind Vektor Adressen Extrem flexibel, dürfen allerdings die Größe von 512 Byte nicht überschreiten.
* Um die Daten innerhalb der kodiert Adresse zu übermitteln, verwenden wir CBOR2.

Um eine Vektor Adresse (VKA) zu erstellen, beginnen wir als Erstes damit, dass wir uns einen zufälligen Privaten Schlüssel erstellen, aus diesem privaten Schlüssel leiten wir einen öffentlichen Schlüssel ab. Nachdem wir den öffentlichen Schlüssel abgeleitet haben, erstellen wir nun den Vektor und beschreiben diesen mit dem öffentlichen Schlüssel.
